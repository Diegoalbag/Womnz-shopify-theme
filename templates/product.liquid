{% assign current_variant = product.selected_or_first_available_variant %}
{% assign featured_image = current_variant.featured_image | default: product.featured_image %}
<div
id="ProductPage" 
class="ProductPage">
  <div class="ProductPage-content container-fluid m-0 row px-5 pb-5">
    <div class="ProductPage-content__gallery mb-5 d-flex align-items-center justify-content-center col-12 col-md-6">
      <div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner slide">
          {% for image in product.images %}
            {% if forloop.first == true %}
              <div class="carousel-item active">
                <img src="{{ image.src | product_img_url: '600x' }}" class="d-block w-100">
              </div>
            {% else %}
              <div class="carousel-item">
                <img src="{{ image.src | product_img_url: '600x' }}" class="d-block w-100">
              </div>
            {% endif %}
          {% endfor %}
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Next</span>
        </button>
      </div>
    </div>
    <div class="ProductPage-content__info d-flex flex-column justify-content-center col-12 col-md-6">
      <h1 class="ProductPage-content__info-title text-uppercase text-white font-weight-normal">{{product.title}}</h1>
      <h1 class="ProductPage-content__info-price text-muted font-weight-light">{{current_variant.price | money}}</h1>
      {% comment %} product options loop {% endcomment %}
      {% for product_option in product.options_with_values %}
        <h1 class="ProductPage-content__info-subtitle mt-5 text-white text-uppercase font-weight-light">{{product_option.name}}</h1>
        <div class="ProductPage-content__info-options d-flex gap-2">
        {% comment %} product option values loop {% endcomment %}
        {% for value in product_option.values %}
            <button 
            @click="changeOption('option{{product_option.position}}', '{{value}}')" 
            :class="`${variant_selected.option{{product_option.position}} == '{{value}}' ? 'selected' : ''} border d-flex justify-content-center align-items-center`">
              <p class="h2 font-weight-normal text-uppercase m-0">{{value}}</p>
            </button>
        {% endfor %}
        </div>
      {% endfor %}
      {% comment %} product quantity {% endcomment %}
      <h1 class="ProductPage-content__info-subtitle mt-5 text-white text-uppercase font-weight-light">quantity</h1>
      <div class="ProductPage-content__info-quantity border d-flex justify-content-center align-items-center">
        <i @click="current_variant_quantity > 1 ? current_variant_quantity-- : ''" class="fas fa-minus me-3 text-white"></i> 
        <span class="text-white text-center mx-5" v-html="current_variant_quantity"></span>
        {% comment %} you can still manual input more than stock {% endcomment %}
        <i @click="current_variant_quantity < current_variant_object.inventory_quantity ? current_variant_quantity++ : '' " class="fas fa-plus ms-3 text-white"></i>
      </div>
      {% comment %} product actions {% endcomment %}
      <div class="ProductPage-content__info-actions row mx-1 d-flex mt-5">
        <span v-if="current_variant_object.inventory_quantity < 30 && current_variant_object.inventory_quantity > 0" class="col-12 text-warning text-uppercase"><i class="fas fa-exclamation-triangle text-warning"></i> only <span v-html="current_variant_object.inventory_quantity"></span> left in stock</span>
        <span v-if="out_of_stock" class="col-12 text-danger text-uppercase"><i class="fas fa-exclamation-triangle text-danger"></i> out of stock</span>
        <span v-if="variant_not_available" class="col-12 text-white text-uppercase"><i class="fas fa-exclamation-circle text-white"></i> not available</span>
        <button 
        @click="AddToCart()"
        :class="`ActionButton me-4 col-5 col-md-4 border d-flex justify-content-center align-items-center ${current_variant_id == 'null' || out_of_stock ? 'disabled' : ''}`" :disabled="current_variant_id == 'null' || out_of_stock">
          <p class="font-weight-normal text-uppercase m-0">add to cart</p>
        </button>
        <button 
        @click="ActionButton()"
        :class="`ActionButton col-6 col-md-4 border d-flex justify-content-center align-items-center ${current_variant_id == 'null' ? 'disabled' : ''}`" :disabled="current_variant_id == 'null'">
          <p class="font-weight-normal text-uppercase m-0">add to wishlist</p>
        </button>
      </div>
      {% comment %} product description {% endcomment %}
      <h1 class="ProductPage-content__info-subtitle mt-5 text-white text-uppercase font-weight-light">description</h1>
      <p class="ProductPage-content__info-description font-weight-light text-white text-justify">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut fringilla accumsan nisi interdum finibus. Suspendisse cursus nisi ut consequat cursus. Maecenas pellentesque dui eget orci vulputate, a mattis nunc lobortis. Donec consequat diam ac lacus ultrices, a vestibulum ligula condimentum.</p>
    </div>
  </div>

  <transition name="fade">
    <div v-if="addednotification" class="AddedNotification">
    <i class="far fa-check-circle text-white"></i>
    </div>
  </transition>
</div>

<script>
const { createApp, ref, computed, watch, onMounted, reactive} = Vue;

const ProductPage = {
  setup() {
    let addednotification = ref(false);
    let current_variant_quantity = ref(1);
    let out_of_stock = computed(() => {
      return current_variant_object.value.inventory_quantity == 0;
    });
    let current_variant_id = computed(() => {
      let filtered_variants = variants.value.find(variant => {
        return variant.option1 == variant_selected.value.option1 && variant.option2 == variant_selected.value.option2 && variant.option3 == variant_selected.value.option3;
      });

      if(filtered_variants){ 
        return filtered_variants.id;
      }
      else{
        return 'null';
      }
    });
    let variant_not_available = computed(() => {
      return current_variant_id.value == 'null';
    });
    let current_variant_object = computed(() => {
      let filtered_variants = variants.value.find(variant => {
        return variant.option1 == variant_selected.value.option1 && variant.option2 == variant_selected.value.option2 && variant.option3 == variant_selected.value.option3;
      });

      if(filtered_variants){ 
        return filtered_variants;
      }
      else{
        return 'null';
      }
    });
    let variant_selected = ref({
      option1: '{{product.options_with_values[0].selected_value}}',
      option2: '{{product.options_with_values[1].selected_value}}',
      option3: '{{product.options_with_values[2].selected_value}}',
    });
    let variants = ref([
      {% for variant in product.variants %}
        {
          id: '{{variant.id}}',
          available: {{variant.available}},
          option1: '{{variant.option1}}',
          option2: '{{variant.option2}}',
          option3: '{{variant.option3}}',
          price: '{{variant.price | money}}',
          {% assign img_url = variant.image.src | img_url: '500x', scale: 2%}
          img: '{% unless condition %}{{img_url}}{% endunless %}',
          inventory_quantity: '{{variant.inventory_quantity}}'
        },
      {% endfor %}
    ]);
    let featured_image = ref('{{featured_image | img_url: '500x', scale: 2}}');

    const changeOption = (option, value) => {
      variant_selected.value[option] = value;
    };
    const ActionButton = () => {
    }
    const AddToCart = () => {
      if(current_variant_id.value == 'null') return;
      addednotification.value = true;
      axios.post('/cart/add.js', {
        items: [
          {
            quantity: 1,
            id: current_variant_id.value,
          }
        ]
      })
        .then(function (response) {
          addednotification.value = false;
        })
        .catch(function (error) {
          console.log(error);
        });

    }
    return {
      current_variant_id,
      variants,
      featured_image,
      variant_selected,
      changeOption,
      ActionButton,
      AddToCart,
      current_variant_quantity,
      current_variant_object,
      out_of_stock,
      variant_not_available,
      addednotification
    }
  },

};

createApp(ProductPage).mount('#ProductPage');
</script>
